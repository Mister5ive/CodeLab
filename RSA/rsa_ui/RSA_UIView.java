/*
 * RSA_UIView.java
 */

package rsa_ui;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.math.BigInteger;
import java.util.Hashtable;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class RSA_UIView extends FrameView {

    public RSA_UIView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        //progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    //progressBar.setVisible(true);
                    //progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    //progressBar.setVisible(false);
                    //progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    //progressBar.setVisible(true);
                    //progressBar.setIndeterminate(false);
                    //progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = RSA_UIApp.getApplication().getMainFrame();
            aboutBox = new RSA_UIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        RSA_UIApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rsa_ui.RSA_UIApp.class).getContext().getResourceMap(RSA_UIView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setName("jTextArea2"); // NOI18N
        jScrollPane2.setViewportView(jTextArea2);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTextArea3.setColumns(20);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setName("jTextArea3"); // NOI18N
        jScrollPane3.setViewportView(jTextArea3);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(78, 78, 78))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setToolTipText(resourceMap.getString("jMenuItem1.toolTipText")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(rsa_ui.RSA_UIApp.class).getContext().getActionMap(RSA_UIView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 520, Short.MAX_VALUE)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel))
                .addGap(3, 3, 3))
        );

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    public static Hashtable CreateHashTable(){
        Hashtable h = new Hashtable();
        // <editor-fold defaultstate="collapsed" desc="Set Value">
        h.put('A', "00");
        h.put('B', "01");
        h.put('C', "02");
        h.put('D', "03");
        h.put('E', "04");
        h.put('F', "05");
        h.put('G', "06");
        h.put('H', "07");
        h.put('I', "08");
        h.put('J', "09");
        h.put('K', "10");
        h.put('L', "11");
        h.put('M', "12");
        h.put('N', "13");
        h.put('O', "14");
        h.put('P', "15");
        h.put('Q', "16");
        h.put('R', "17");
        h.put('S', "18");
        h.put('T', "19");
        h.put('U', "20");
        h.put('V', "21");
        h.put('W', "22");
        h.put('X', "23");
        h.put('Y', "24");
        h.put('Z', "25");
        h.put(' ', "26");
        h.put('.', "27");
        h.put(',', "28");
        h.put('!', "29");
        h.put(';', "30");
        h.put("00", "A");
        h.put("01", "B");
        h.put("02", "C");
        h.put("03", "D");
        h.put("04", "E");
        h.put("05", "F");
        h.put("06", "G");
        h.put("07", "H");
        h.put("08", "I");
        h.put("09", "J");
        h.put("0", "A");
        h.put("1", "B");
        h.put("2", "C");
        h.put("3", "D");
        h.put("4", "E");
        h.put("5", "F");
        h.put("6", "G");
        h.put("7", "H");
        h.put("8", "I");
        h.put("9", "J");
        h.put("10", "K");
        h.put("11", "L");
        h.put("12", "M");
        h.put("13", "N");
        h.put("14", "O");
        h.put("15", "P");
        h.put("16", "Q");
        h.put("17", "R");
        h.put("18", "S");
        h.put("19", "T");
        h.put("20", "U");
        h.put("21", "V");
        h.put("22", "W");
        h.put("23", "X");
        h.put("24", "Y");
        h.put("25", "Z");
        h.put("26", " ");
        h.put("27", ".");
        h.put("28", ",");
        h.put("29", "!");
        h.put("30", ";");
        // </editor-fold>
        return h;
    }
    
    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
        // TODO add your handling code here:
        Option op = new Option();
        op.setVisible(true);
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        Configuration rc = new Configuration("option.properties");
        BigInteger p = new BigInteger(rc.getValue("p"));
        BigInteger q = new BigInteger(rc.getValue("q"));
        BigInteger n = p.multiply(q);
        BigInteger fai = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        BigInteger e = new BigInteger(rc.getValue("e"));
        Hashtable hash = new Hashtable();
        hash = CreateHashTable();

        if(jTextArea2.getText().length()!=200 || jTextArea3.getText().length() !=800){
            JOptionPane.showMessageDialog(null, "There should be 200 letters in onetime pad and 800 letter in message", "Notice", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String OneTimePad = jTextArea2.getText();
        String Message = jTextArea3.getText();

        String PadFront = "";
        String PadBack = "";
        for(int i =0; i<200; i++){
            if(i<100)
                PadFront += hash.get(OneTimePad.charAt(i));
            else
                PadBack += hash.get(OneTimePad.charAt(i));
        }
        BigInteger KeyF = new BigInteger(PadFront);
        BigInteger KeyB = new BigInteger(PadBack);

        String[] SubMessage;
        SubMessage = new String[8];
        for(int i =0; i<8; i++){
            SubMessage[i] = Message.substring(100*i, 100*(i+1));
        }
        String Temp = "";
        for(int i = 0; i<8; i++){
            for(int j = 0; j<100; j++){
                Temp += hash.get(SubMessage[i].charAt(j));
            }
            SubMessage[i] = Temp;
            Temp = "";
        }
        String EncrypedOneTimePad = "";
        String TempEncrypedOneTimePad = "";
        KeyF = KeyF.modPow(e, n);
        TempEncrypedOneTimePad = KeyF.toString();
        if(TempEncrypedOneTimePad.length()<200){
            int l = 200 - TempEncrypedOneTimePad.length();
            for(;l>0;l--){
                TempEncrypedOneTimePad = "0" + TempEncrypedOneTimePad;
            }
        }
        EncrypedOneTimePad += TempEncrypedOneTimePad;
        TempEncrypedOneTimePad = "";
        KeyB = KeyB.modPow(e, n);
        TempEncrypedOneTimePad = KeyB.toString();
        if(TempEncrypedOneTimePad.length()<200){
            int l = 200 - TempEncrypedOneTimePad.length();
            for(;l>0;l--){
                TempEncrypedOneTimePad = "0" + TempEncrypedOneTimePad;
            }
        }
        EncrypedOneTimePad += TempEncrypedOneTimePad;


        String EncrypedMessage = "";
        int k;
        int i =0;
        while(i<800){
            for(int j = 0; j<200; j++){
              k =(Integer.parseInt((String)hash.get(OneTimePad.charAt(j)))+Integer.parseInt((String)hash.get(Message.charAt(i))))%31;
              EncrypedMessage += (String)hash.get(String.valueOf(k));
              i++;
            }
        }

        jTextArea2.setText(EncrypedOneTimePad);
        jTextArea3.setText(EncrypedMessage);
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        // TODO add your handling code here:
        Configuration rc = new Configuration("option.properties");
        BigInteger p = new BigInteger(rc.getValue("p"));
        BigInteger q = new BigInteger(rc.getValue("q"));
        BigInteger n = p.multiply(q);
        BigInteger fai = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        BigInteger e = new BigInteger(rc.getValue("e"));
        BigInteger d = e.modInverse(fai);
        Hashtable hash = new Hashtable();
        hash = CreateHashTable();

        if(jTextArea2.getText().length()!=400 || jTextArea3.getText().length() !=800){
            JOptionPane.showMessageDialog(null, "There should be 400 letters in onetime pad and 800 letter in message", "Notice", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String EncrypedOneTimePad = jTextArea2.getText();
        String EncrypedMessage = jTextArea3.getText();

        String DecrypedOneTimePad = "";
        String DecrypedMessage = "";
        BigInteger EncrypedOneTimePadFront = new BigInteger(EncrypedOneTimePad.substring(0, 200));
        BigInteger EncrypedOneTimePadBack = new BigInteger(EncrypedOneTimePad.substring(200, 400));
        BigInteger DecrypedFront = EncrypedOneTimePadFront.modPow(d, n);
        BigInteger DecrypedBack = EncrypedOneTimePadBack.modPow(d, n);

        String TempDencrypedOneTimePad = "";
        TempDencrypedOneTimePad = DecrypedFront.toString();
        if(TempDencrypedOneTimePad.length()<200){
            int l = 200 - TempDencrypedOneTimePad.length();
            for(;l>0;l--){
                TempDencrypedOneTimePad = "0" + TempDencrypedOneTimePad;
            }
        }
        DecrypedOneTimePad += TempDencrypedOneTimePad;
        TempDencrypedOneTimePad = "";
        TempDencrypedOneTimePad = DecrypedBack.toString();
        if(TempDencrypedOneTimePad.length()<200){
            int l = 200 - TempDencrypedOneTimePad.length();
            for(;l>0;l--){
                TempDencrypedOneTimePad = "0" + TempDencrypedOneTimePad;
            }
        }
        DecrypedOneTimePad += TempDencrypedOneTimePad;
        TempDencrypedOneTimePad = "";
        for(int j = 0; j<200; j++){
            TempDencrypedOneTimePad += /*(char)Integer.parseInt(DecrypedOneTimePad.substring(j*2, j*2+2))*/hash.get(DecrypedOneTimePad.substring(j*2, j*2+2));
        }
        System.out.println(TempDencrypedOneTimePad);

        int i=0;
        int k;
        while(i<800){
            for(int j = 0; j<200; j++){
              //k =(Integer.parseInt((String)hash.get(EncrypedMessage.charAt(i)))-Integer.parseInt(EncrypedOneTimePad.substring(j*2, j*2+2)))%31;/*DecrypedOneTimePad.substring(j*2, j*2+2)*/
              k =(Integer.parseInt((String)hash.get(EncrypedMessage.charAt(i)))-Integer.parseInt(DecrypedOneTimePad.substring(j*2, j*2+2)))%31;/**/
              if(k<0){
                  k= k+31;
              }
              DecrypedMessage += (String)hash.get(String.valueOf(k));
              i++;
            }
        }

        jTextArea2.setText(TempDencrypedOneTimePad);
        jTextArea3.setText(DecrypedMessage);
    }//GEN-LAST:event_jButton2MouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
